import{J as a,K as o,V as g,L as m,u as s,A as p,B as c,C as l}from"./index-8a7d0ddb.js";import{m as n,u as d}from"./LayerView-c208e979.js";import{i as u}from"./GraphicContainer-da3bd512.js";import{r as w}from"./GraphicsView2D-2db00077.js";import"./scaleUtils-bb2ad117.js";import"./Container-e3e1f850.js";import"./definitions-181aacbc.js";import"./enums-bdecffa2.js";import"./Texture-276891d4.js";import"./color-66a81566.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-c8cae727.js";import"./FeatureContainer-ae205864.js";import"./AttributeStoreView-e7acbf82.js";import"./TiledDisplayObject-a16a6043.js";import"./WGLContainer-ee25c10b.js";import"./FramebufferObject-bee5421c.js";import"./ProgramTemplate-a8c46b04.js";import"./GeometryUtils-a163e449.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-7c5e4cbe.js";import"./featureConversionUtils-8b26ee93.js";import"./OptimizedGeometry-d94e541f.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./visualVariablesUtils-f801a5b9.js";import"./ExpandedCIM-e2ecad80.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-c8352706.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-d2ecb0cf.js";import"./floatRGBA-e76f1a93.js";import"./util-de2a9e3f.js";import"./TileContainer-e01d67f6.js";import"./vec3f32-2da9db36.js";import"./normalizeUtilsSync-25fa9dd6.js";import"./projectionSupport-1ea9ed40.js";import"./json-48e3ea08.js";import"./Matcher-d5690d71.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-a929d0bb.js";import"./ComputedAttributeStorage-ba05904c.js";import"./TimeOnly-a697da13.js";let e=class extends n(d){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new w({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new u(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=a(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):g.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(m);return h!=null&&h.length?(this._addHighlight(h),s(()=>this._removeHighlight(h))):s()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};p([c()],e.prototype,"graphicsView",void 0),e=p([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const oi=e;export{oi as default};
