import{x as w,y,z as I,A as V,B as H,d as v,C as o,D as c,E as T,F as n,G as g,H as q}from"./index-dade14c2.js";import"./Container-30b1bd37.js";import"./BufferPool-3bb24936.js";import"./color-2a6af067.js";import"./WGLContainer-fb0ff87f.js";import"./enums-bdecffa2.js";import"./Texture-be9b5d1c.js";import"./ProgramTemplate-f3cf6f84.js";import"./definitions-0509da3e.js";import"./GeometryUtils-df0db2f3.js";import"./FramebufferObject-4b1219b6.js";import"./number-e491b09e.js";import"./StyleDefinition-29c49b98.js";import"./enums-fb086c25.js";import"./MagnifierPrograms-af88d52b.js";import"./OrderIndependentTransparency-6ae10952.js";import"./floatRGBA-6bd81ad0.js";import"./testSVGPremultipliedAlpha-ffb27064.js";import{r as U}from"./GraphicsView2D-0f6197a5.js";import"./AttributeStoreView-a010b8c1.js";import"./earcut-5406b9f6.js";import"./featureConversionUtils-98930eb8.js";import"./vec3f32-2da9db36.js";import{r as C,o as f,n as d}from"./imageUtils-48e21485.js";import{m as S,u as b}from"./LayerView-764b83bc.js";import{a as Q}from"./HighlightGraphicContainer-9d311c8f.js";import{a as $}from"./RefreshableLayerView-638803e0.js";import{S as F,G,r as P}from"./drapedUtils-ceacbf5e.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./config-1337d16e.js";import"./OptimizedGeometry-196224d4.js";import"./alignmentUtils-ae955d28.js";import"./cimAnalyzer-604dca85.js";import"./fontUtils-f896f516.js";import"./BidiEngine-9a40f2f4.js";import"./labelPoint-251dae52.js";import"./GeometryUtils-984e8446.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-a73da41e.js";import"./Rasterizer-38794803.js";import"./rasterizingUtils-a5c9e6e3.js";import"./pbf-debb4a5b.js";import"./imageutils-6df2ecc4.js";import"./Matcher-6ce60b28.js";import"./visualVariablesUtils-c0074acc.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-7fb7c37e.js";import"./ExpandedCIM-5e6311a6.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-05276efd.js";import"./OptimizedFeature-e90b69df.js";import"./TimeOnly-b53a8ed4.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-7df5eeac.js";import"./projectionSupport-fbcfed3b.js";import"./json-48e3ea08.js";import"./TiledDisplayObject-1d3f4e42.js";import"./util-563277c5.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-37cdd272.js";import"./Bitmap-b10bd5a9.js";import"./TileContainer-1f0bf5f3.js";import"./BaseGraphicContainer-bf338560.js";import"./FeatureContainer-c7385c1a.js";import"./popupUtils-eabdd2fa.js";const k=[0,0];let a=class extends $(C(S(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,r)=>this.fetchTile(i,r)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(r,h)=>P(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{i.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):H()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return v((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(k,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:r,resamplingLevel:h=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!o(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new c(m),_=await this.fetchTile(u,{...e,resamplingLevel:h+1});return d(this._tileInfoView,_,u,t)}}throw s}const l=new c(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:r}),l.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(s){if(o(s))throw s;p=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||T.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const Nt=a;export{Nt as default};
