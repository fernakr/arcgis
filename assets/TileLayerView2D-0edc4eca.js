import{x as w,y,z as I,A as V,B as H,d as v,C as o,D as c,E as T,F as n,G as g,H as q}from"./index-8fbcd33f.js";import"./Container-24dc81c0.js";import"./BufferPool-70d71947.js";import"./color-887ae2cd.js";import"./WGLContainer-af7f09ed.js";import"./enums-bdecffa2.js";import"./Texture-5f55e3dc.js";import"./ProgramTemplate-f230697a.js";import"./definitions-8d1e5316.js";import"./GeometryUtils-467e19d9.js";import"./FramebufferObject-032fdd05.js";import"./number-e491b09e.js";import"./StyleDefinition-29c49b98.js";import"./enums-fb086c25.js";import"./MagnifierPrograms-c9155db9.js";import"./OrderIndependentTransparency-6ae10952.js";import"./floatRGBA-75468c12.js";import"./testSVGPremultipliedAlpha-ae837374.js";import{r as U}from"./GraphicsView2D-a306da91.js";import"./AttributeStoreView-2c3cfa29.js";import"./earcut-b55b59bd.js";import"./featureConversionUtils-d21d2be5.js";import"./vec3f32-2da9db36.js";import{r as C,o as f,n as d}from"./imageUtils-c2834525.js";import{m as S,u as b}from"./LayerView-18a35bfd.js";import{a as Q}from"./HighlightGraphicContainer-6b375895.js";import{a as $}from"./RefreshableLayerView-6dbccf72.js";import{S as F,G,r as P}from"./drapedUtils-f0fd36ee.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./config-1337d16e.js";import"./OptimizedGeometry-196224d4.js";import"./alignmentUtils-ae955d28.js";import"./cimAnalyzer-67376b93.js";import"./fontUtils-a431571e.js";import"./BidiEngine-9a40f2f4.js";import"./labelPoint-e00f761e.js";import"./GeometryUtils-984e8446.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-7c7b30e7.js";import"./Rasterizer-462e30b4.js";import"./rasterizingUtils-64549f24.js";import"./pbf-42562d1b.js";import"./imageutils-4f249651.js";import"./Matcher-653ef42b.js";import"./visualVariablesUtils-2727aa18.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-33ee9979.js";import"./ExpandedCIM-8790569d.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-5a4ac822.js";import"./OptimizedFeature-e90b69df.js";import"./TimeOnly-51bfdcd1.js";import"./basicInterfaces-11f56cb3.js";import"./normalizeUtilsSync-7590a433.js";import"./projectionSupport-7bb25353.js";import"./json-48e3ea08.js";import"./TiledDisplayObject-7e4aabeb.js";import"./util-6b041577.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-5c467b32.js";import"./Bitmap-ceee7fc0.js";import"./TileContainer-26659710.js";import"./BaseGraphicContainer-e80df7e3.js";import"./FeatureContainer-2eb3bf21.js";import"./popupUtils-5b975242.js";const k=[0,0];let a=class extends $(C(S(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,r)=>this.fetchTile(i,r)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(r,h)=>P(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{i.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):H()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return v((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(k,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:r,resamplingLevel:h=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!o(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new c(m),_=await this.fetchTile(u,{...e,resamplingLevel:h+1});return d(this._tileInfoView,_,u,t)}}throw s}const l=new c(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:r}),l.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(s){if(o(s))throw s;p=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||T.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([g()],a.prototype,"resampling",null),n([g()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const Nt=a;export{Nt as default};
